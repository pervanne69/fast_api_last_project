from fastapi import Dependsfrom sqlalchemy.ext.asyncio import AsyncSessionfrom ..database import get_async_sessionfrom sqlalchemy import select, insert, deletefrom .schemas import EventCreate, EventDeleteasync def get_events_from_db(db, session: AsyncSession = Depends(    get_async_session)):    query = select(db)    result = await session.execute(query)    return result.all()async def get_event_from_db_by_name(db, name: str,                                    session: AsyncSession = Depends(                                        get_async_session)):    query = select(db).where(db.c.name == name)    result = await session.execute(query)    result_f = result.all()    return result_fasync def get_event_from_db_by_id(db, event_id: int,                                  session: AsyncSession = Depends(                                      get_async_session)):    query = select(db).where(db.c.id == event_id)    result = await session.execute(query)    result_f = result.all()    return result_fasync def create_event(db, event_cr: EventCreate,                       session: AsyncSession = Depends(get_async_session)):    statement = insert(db).values(name=event_cr.name, site_id=event_cr.site_id,                                  achievement_id=event_cr.achievement_id)    await session.execute(statement)    await session.commit()async def delete_event_from_db(db, event_del: EventDelete,                               session: AsyncSession = Depends(                                   get_async_session)):    statement = delete(db).where(db.c.name == event_del.name)    await session.execute(statement)    await session.commit()