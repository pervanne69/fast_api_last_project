from typing import Listfrom fastapi import APIRouter, Dependsfrom sqlalchemy.ext.asyncio import AsyncSessionfrom ..models.models import eventfrom ..database import get_async_sessionfrom .schemas import EventRead, EventCreate, EventDeletefrom .services import get_events_from_db, get_event_from_db_by_name, create_event, \    delete_event_from_dbrouter = APIRouter(    prefix="/event",    tags=["Event"])@router.get("/", response_model=List[EventRead])async def get_events(session: AsyncSession = Depends(get_async_session)):    try:        result = await get_events_from_db(event, session)        return result    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }@router.post("/")async def set_event(event_cr: EventCreate,                    session: AsyncSession = Depends(get_async_session)):    try:        if not await get_event_from_db_by_name(event, event_cr.name, session):            await create_event(event, event_cr, session)            return {                "status": "success",                "data": None,                "details": f"Event with name {event_cr.name} has been created"            }        return {            "status": "error",            "data": None,            "details": f"Event with name {event_cr.name} has been already created"        }    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }@router.delete("/")async def delete_event(event_del: EventDelete,                       session: AsyncSession = Depends(get_async_session)):    try:        if await get_event_from_db_by_name(event, event_del.name, session):            await delete_event_from_db(event, event_del, session)            return {                "status": "success",                "data": None,                "details": f"Event with name {event_del.name} has been deleted"            }        return {            "status": "error",            "data": None,            "details": f"Event with name {event_del.name} is not exist"        }    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }# ORM - Object relational model# SQL Injection