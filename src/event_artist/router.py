from typing import Listfrom fastapi import APIRouter, Dependsfrom sqlalchemy.ext.asyncio import AsyncSessionfrom ..models.models import event_artist, user, eventfrom ..database import get_async_sessionfrom .schemas import EventArtistRead, EventArtistElementfrom ..user.services import get_user_by_idfrom ..event.services import get_event_from_db_by_idfrom .services import get_event_artists_from_db, get_event_artist_from_db, \    create_event_artist, delete_event_artist_from_dbrouter = APIRouter(    prefix="/event_artist",    tags=["Event artist"])@router.get("/", response_model=List[EventArtistRead])async def get_event_artists(        session: AsyncSession = Depends(get_async_session)):    try:        return await get_event_artists_from_db(event_artist, session)    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }@router.post("/")async def set_event_artist(event_artist_cr: EventArtistElement,                           session: AsyncSession = Depends(get_async_session)):    try:        user_by_id = await get_user_by_id(event_artist_cr.artist_id, user,                                          session)        event_by_id = await get_event_from_db_by_id(event,                                                    event_artist_cr.event_id,                                                    session)        if user_by_id:            if event_by_id:                if user_by_id[0][5] == 2:                    if not await get_event_artist_from_db(event_artist,                                                          event_artist_cr,                                                          session):                        await create_event_artist(event_artist,                                                  event_artist_cr,                                                  session)                        return {                            "status": "success",                            "data": None,                            "details": "Artist has successfully registered on this event"                        }                    return {                        "status": "error",                        "data": None,                        "details": f"User with artist_id {event_artist_cr.artist_id} is already registered on this event"                    }                return {                    "status": "error",                    "data": None,                    "details": f"User with user_id {event_artist_cr.artist_id} is not an artist"                }            return {                "status": "error",                "data": None,                "details": f"Event with event_id {event_artist_cr.event_id} is not exist"            }        return {            "status": "error",            "data": None,            "details": f"User with user_id {event_artist_cr.artist_id} is not exist"        }    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }@router.delete("/")async def delete_event_artist(event_artist_del: EventArtistElement,                              session: AsyncSession = Depends(                                  get_async_session)):    try:        user_by_id = await get_user_by_id(event_artist_del.artist_id, user,                                          session)        event_by_id = await get_event_from_db_by_id(event,                                                    event_artist_del.event_id,                                                    session)        if user_by_id:            if event_by_id:                if await get_event_artist_from_db(event_artist,                                                  event_artist_del,                                                  session):                    await delete_event_artist_from_db(event_artist,                                                      event_artist_del,                                                      session)                    return {                        "status": "success",                        "data": None,                        "details": "Artist has been successfully deleted"                    }                return {                    "status": "error",                    "data": None,                    "details": f"User with artist_id {event_artist_del.artist_id} is not registered on this event"                }            return {                "status": "error",                "data": None,                "details": f"Event with event_id {event_artist_del.event_id} is not exist"            }        return {            "status": "error",            "data": None,            "details": f"User with user_id {event_artist_del.artist_id} is not exist"        }    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }