from typing import Listfrom fastapi import APIRouter, Dependsfrom sqlalchemy.ext.asyncio import AsyncSessionfrom ..models.models import sitefrom ..database import get_async_sessionfrom .schemas import SiteCreate, SiteRead, SiteDeletefrom .services import get_sites_from_db, get_site_by_data, create_site, \    get_site_by_name, delete_site_from_dbrouter = APIRouter(    prefix="/site",    tags=["Site"])@router.get("/", response_model=List[SiteRead])async def get_sites(        session: AsyncSession = Depends(get_async_session)):    try:        return await get_sites_from_db(site, session)    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }@router.post("/")async def set_site(site_cr: SiteCreate,                   session: AsyncSession = Depends(get_async_session)):    try:        if await get_site_by_data(site_cr, site, session):            return {                "status": "error",                "data": None,                "details": "Site is already exist"            }        await create_site(site_cr, site, session)        return {            "status": "success",            "data": None,            "details": "Site has been created"        }    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }@router.delete("/")async def delete_site(site_del: SiteDelete,                      session: AsyncSession = Depends(get_async_session)):    try:        if not await get_site_by_name(site_del, site, session):            return {                "status": "error",                "data": None,                "details": f"Site with name {site_del.name} is not exist"            }        await delete_site_from_db(site_del, site, session)        return {            "status": "success",            "data": None,            "details": f"Site with name {site_del.name} has been deleted"        }    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }