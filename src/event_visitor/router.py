from typing import Listfrom fastapi import APIRouter, Dependsfrom sqlalchemy.ext.asyncio import AsyncSessionfrom ..models.models import event_visitor, user, eventfrom ..database import get_async_sessionfrom .schemas import EventVisitorRead, EventVisitorElementfrom ..user.services import get_user_by_idfrom ..event.services import get_event_from_db_by_idfrom .services import get_event_visitors_from_db, get_event_visitor_from_db, \    create_event_visitor, delete_event_visitor_from_dbrouter = APIRouter(    prefix="/event_visitor",    tags=["Event visitor"])@router.get("/", response_model=List[EventVisitorRead])async def get_event_visitors(        session: AsyncSession = Depends(get_async_session)):    try:        return await get_event_visitors_from_db(event_visitor, session)    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }@router.post("/",             description="""             This is the description of this request\n             user_status can take two values ("Пойду", "Не пойду")""")async def set_event_visitor(event_visitor_el: EventVisitorElement,                            session: AsyncSession = Depends(                                get_async_session)):    try:        user_by_id = await get_user_by_id(event_visitor_el.user_id, user,                                          session)        event_by_id = await get_event_from_db_by_id(event,                                                    event_visitor_el.event_id,                                                    session)        if user_by_id:            if event_by_id:                if not await get_event_visitor_from_db(event_visitor,                                                       event_visitor_el,                                                       session):                    await create_event_visitor(event_visitor,                                               event_visitor_el,                                               session)                    return {                        "status": "success",                        "data": None,                        "details": "Visitor has successfully registered on this event"                    }                return {                    "status": "error",                    "data": None,                    "details": f"Visitor with user_id {event_visitor_el.user_id} is already registered on this event"                }            return {                "status": "error",                "data": None,                "details": f"User with user_id {event_visitor_el.user_id} is not an visitor"            }        return {            "status": "error",            "data": None,            "details": f"Visitor with user_id {event_visitor_el.user_id} is not exist"        }    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }@router.delete("/")async def delete_event_visitor(event_visitor_el: EventVisitorElement,                               session: AsyncSession = Depends(                                   get_async_session)):    try:        user_by_id = await get_user_by_id(event_visitor_el.user_id, user,                                          session)        event_by_id = await get_event_from_db_by_id(event,                                                    event_visitor_el.event_id,                                                    session)        if user_by_id:            if event_by_id:                if await get_event_visitor_from_db(event_visitor,                                                   event_visitor_el,                                                   session):                    await delete_event_visitor_from_db(event_visitor,                                                       event_visitor_el,                                                       session)                    return {                        "status": "success",                        "data": None,                        "details": "Visitor has been successfully deleted"                    }                return {                    "status": "error",                    "data": None,                    "details": f"User with user_id {event_visitor_el.user_id} is not registered on this event"                }            return {                "status": "error",                "data": None,                "details": f"Event with event_id {event_visitor_el.event_id} is not exist"            }        return {            "status": "error",            "data": None,            "details": f"Visitor with user_id {event_visitor_el.user_id} is not exist"        }    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }