import aiofilesfrom fastapi import Depends, UploadFilefrom sqlalchemy.ext.asyncio import AsyncSessionfrom ..database import get_async_sessionfrom sqlalchemy import select, insert, deletefrom pathlib import Pathfrom .schemas import AchievementDeleteBASE_DIR = Path(__file__).resolve().parentUPLOAD_DIR = BASE_DIR / 'uploads'UPLOAD_DIR.mkdir(parents=True, exist_ok=True)async def get_achievements_from_db(db, session: AsyncSession = Depends(    get_async_session)):    query = select(db)    result = await session.execute(query)    return result.all()async def get_achievement_from_db(db, achievement_del: AchievementDelete,                                  session: AsyncSession = Depends(                                      get_async_session)):    query = select(db).where(db.c.id == achievement_del.id,                             db.c.name == achievement_del.name)    result = await session.execute(query)    result_f = result.all()    if len(result_f):        return True    return Falseasync def get_achievement_by_id(db, achievement_id: int,                                session: AsyncSession = Depends(                                    get_async_session)):    query = select(db).where(db.c.id == achievement_id)    result = await session.execute(query)    result_f = result.all()    return result_fasync def save_achievement(db, upload_file: UploadFile,                           session: AsyncSession = Depends(get_async_session)):    statement = insert(db).values(name=upload_file.filename.split(".")[0],                                  description="achievement",                                  picture_name=upload_file.filename)    await session.execute(statement)    await session.commit()async def delete_achievement_from_db(db, achievement_del: AchievementDelete,                                     session: AsyncSession = Depends(                                         get_async_session)):    statement = delete(db).where(db.c.id == achievement_del.id,                                 db.c.name == achievement_del.name)    await session.execute(statement)    await session.commit()async def upload_achievement(upload_file: UploadFile):    file_location = UPLOAD_DIR / upload_file.filename    async with aiofiles.open(file_location, "wb") as file_object:        file_content = await upload_file.read()        await file_object.write(file_content)