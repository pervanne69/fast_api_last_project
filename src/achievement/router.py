from typing import Listfrom pathlib import Pathfrom fastapi import APIRouter, Depends, UploadFilefrom sqlalchemy.ext.asyncio import AsyncSessionfrom fastapi import Filefrom ..models.models import achievementfrom ..database import get_async_sessionfrom .schemas import AchievementRead, AchievementDeletefrom .services import save_achievement, upload_achievement, \    get_achievements_from_db, get_achievement_from_db, \    delete_achievement_from_dbrouter = APIRouter(    prefix="/achievement",    tags=["Achievement"])BASE_DIR = Path(__file__).resolve().parentUPLOAD_DIR = BASE_DIR / 'uploads'UPLOAD_DIR.mkdir(parents=True, exist_ok=True)@router.get("/", response_model=List[AchievementRead])async def get_achievements(        session: AsyncSession = Depends(get_async_session)):    try:        return await get_achievements_from_db(achievement, session)    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }@router.post("/")async def set_achievement(upload_file: UploadFile = File(...),                          session: AsyncSession = Depends(get_async_session)):    try:        await upload_achievement(upload_file)        await save_achievement(achievement, upload_file, session)        return {            "status": "success",            "data": None,            "details": "The achievement has been added"        }    except Exception as ex:        print('no')        return {            "status": "error",            "data": None,            "details": ex        }@router.delete("/")async def delete_achievement(achievement_del: AchievementDelete,                             session: AsyncSession = Depends(                                 get_async_session)):    try:        if await get_achievement_from_db(achievement, achievement_del,                                         session):            await delete_achievement_from_db(achievement, achievement_del,                                             session)            return {                "status": "success",                "data": None,                "details": f"Achievement {achievement_del.name} has been deleted"            }        return {            "status": "error",            "data": None,            "details": f"Achievement with name {achievement_del.name} is not exist"        }    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }# ORM - Object relational model# SQL Injection