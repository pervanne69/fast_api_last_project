from typing import Listfrom fastapi import APIRouter, Dependsfrom sqlalchemy.ext.asyncio import AsyncSessionfrom ..models.models import flashback, user, eventfrom ..database import get_async_sessionfrom .schemas import FlashbackReadfrom .services import get_flashbacks_from_db, get_flashback_by_data, \    create_flashback, delete_flashback_from_dbfrom ..user.services import get_user_by_idfrom ..event.services import get_event_from_db_by_idfrom .schemas import FlashbackElementrouter = APIRouter(    prefix="/flashback",    tags=["Flashback"])@router.get("/", response_model=List[FlashbackRead])async def get_flashbacks(        session: AsyncSession = Depends(get_async_session)):    try:        return await get_flashbacks_from_db(flashback, session)    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }@router.post("/")async def set_flashback(flashback_el: FlashbackElement,                        session: AsyncSession = Depends(get_async_session)):    try:        user_by_id = await get_user_by_id(flashback_el.user_id, user, session)        event_by_id = await get_event_from_db_by_id(event,                                                    flashback_el.event_id,                                                    session)        if user_by_id:            if event_by_id:                if not await get_flashback_by_data(flashback, flashback_el,                                                   session):                    await create_flashback(flashback, flashback_el, session)                    return {                        "status": "success",                        "data": None,                        "details": "Flashback has been added"                    }                return {                    "status": "error",                    "data": None,                    "details": "Flashback is already exist"                }            return {                "status": "error",                "data": None,                "details": "Event is not exist"            }        return {            "status": "error",            "data": None,            "details": "User is not exist"        }    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }@router.delete("/")async def delete_flashback(flashback_el: FlashbackElement,                           session: AsyncSession = Depends(get_async_session)):    try:        user_by_id = await get_user_by_id(flashback_el.user_id, user, session)        event_by_id = await get_event_from_db_by_id(event,                                                    flashback_el.event_id,                                                    session)        if user_by_id:            if event_by_id:                if await get_flashback_by_data(flashback, flashback_el,                                               session):                    await delete_flashback_from_db(flashback, flashback_el,                                                   session)                    return {                        "status": "success",                        "data": None,                        "details": "Flashback has been deleted"                    }                return {                    "status": "error",                    "data": None,                    "details": "Flashback is not exist"                }            return {                "status": "error",                "data": None,                "details": "Event is not exist"            }        return {            "status": "error",            "data": None,            "details": "User is not exist"        }    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }# ORM - Object relational model# SQL Injection