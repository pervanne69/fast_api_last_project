from fastapi import APIRouter, Dependsfrom sqlalchemy.ext.asyncio import AsyncSessionfrom ..models.models import userfrom .schemas import UserReadfrom ..database import get_async_sessionfrom .services import get_all_users_from_db, get_user_by_email, \    delete_user_from_dbfrom typing import Listrouter = APIRouter(    prefix="/users",    tags=["User"])@router.get("/all_users", response_model=List[UserRead],            description="""Returns every user""")async def get_all_users(session: AsyncSession = Depends(get_async_session)):    return await get_all_users_from_db(user, session)@router.get("/user", response_model=List[UserRead])async def get_user(user_email: str,                   session: AsyncSession = Depends(get_async_session)):    try:        return await get_user_by_email(user_email, user, session)    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }@router.delete("/delete_user")async def delete_user(user_email: str,                      session: AsyncSession = Depends(get_async_session)):    try:        user_by_email = await get_user_by_email(user_email, user, session)        if not len(user_by_email):            return {                "status": "error",                "data": None,                "details": f"User with email {user_email} is not exist"            }        await delete_user_from_db(user_email, user, session)        return {            "status": "success",            "data": None,            "details": f"User with email {user_email} has been deleted"        }    except Exception as ex:        return {            "status": "error",            'data': None,            "details": ex        }# ORM - Object relational model# SQL Injection