import datetimefrom typing import Optional, Anyimport refrom fastapi_users import schemasfrom pydantic import Field, EmailStr, constr, field_validatorclass UserRead(schemas.BaseUser[int]):    id: int    email: str = Field(default="qwerty@gmail.com")    username: str = Field(default="qwerty")    registered_at: datetime.datetime    role_id: int    class Config:        from_attributes = Trueclass UserCreate(schemas.BaseUserCreate):    email: EmailStr    username: str = Field(min_length=5)    password: constr(min_length=8, max_length=32)    role_id: int = Field(ge=1, le=4)    is_active: Optional[bool] = True    is_superuser: Optional[bool] = False    is_verified: Optional[bool] = False    @field_validator("email")    @classmethod    def validate_email(cls, value):        if not bool(re.fullmatch(r'[\w.-]+@[\w-]+\.[\w.]+', value)):            raise ValueError("Email is invalid")        return value    @field_validator("password")    @classmethod    def validate_password(cls, value):        password_length = len(value)        if password_length < 8 or password_length > 16:            raise ValueError(                "The password must be between 8 and 16 characters long")        return value