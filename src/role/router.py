from typing import Listfrom fastapi import APIRouter, Dependsfrom sqlalchemy import selectfrom sqlalchemy.ext.asyncio import AsyncSessionfrom ..models.models import role, userfrom ..database import get_async_sessionfrom .schemas import RoleRead, RoleChangefrom ..utils.hasher import verify_passwordfrom .services import get_all_roles_from_db, change_role_of_userfrom .services import get_user_by_emailrouter = APIRouter(    prefix="/role",    tags=["Role"])@router.get("/", response_model=List[RoleRead])async def get_roles(session: AsyncSession = Depends(get_async_session)):    try:        return await get_all_roles_from_db(role, session)    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }@router.put("/",            description="""             This method is for developers.\n              You must confirm that you are developer.\n              Input your developer data\n\n             dev_email: Your developer email\n             dev_password: Your developer password\n             user_id: The id of user whose you want to change the role id\n             user_email: The email of user whose you want\n             role_id_change: The role id which you want to set as new role id              for user             """)async def set_roles(role_change: RoleChange,                    session: AsyncSession = Depends(get_async_session)):    try:        user_by_email = get_user_by_email(role_change.user_email, user,                                          session)        if not user_by_email:            return {                "status": "error",                "data": "None",                "details": "This user is not exist"            }        query = select(user).where(user.c.email == role_change.dev_email)        result = await session.execute(query)        developer_by_email = result.fetchall()        if verify_password(role_change.dev_password,                           developer_by_email[0][3]) and \                developer_by_email[0][5] == 4:            await change_role_of_user(role_change.role_id_change,                                      role_change.user_email,                                      role_change.user_id,                                      user, session)            return {                "status": "success",                "data": None,                "details": f"You have changed the role of user with user_id {role_change.user_id}"            }        else:            return {                "status": "error",                "data": None,                "details": f"You have not confirmed your password. Please try again"            }    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }# ORM - Object relational model# SQL Injection