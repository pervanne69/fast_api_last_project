from typing import Listfrom fastapi import APIRouter, Dependsfrom sqlalchemy.ext.asyncio import AsyncSessionfrom ..models.models import user_achievement, user, achievementfrom ..database import get_async_sessionfrom .schemas import UserAchievementRead, UserAchievementElementfrom .services import get_user_achievements_from_db, \    get_user_achievement_by_data, create_user_achievement, \    delete_user_achievement_from_dbfrom ..user.services import get_user_by_idfrom ..achievement.services import get_achievement_by_idrouter = APIRouter(    prefix="/user_achievement",    tags=["User achievement"])@router.get("/", response_model=List[UserAchievementRead])async def get_user_achievements(        session: AsyncSession = Depends(get_async_session)):    try:        return await get_user_achievements_from_db(user_achievement, session)    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }@router.post("/")async def set_user_achievement(user_achievement_el: UserAchievementElement,                               session: AsyncSession = Depends(                                   get_async_session)):    try:        user_by_id = await get_user_by_id(user_achievement_el.user_id, user,                                          session)        achievement_by_id = await get_achievement_by_id(achievement,                                                        user_achievement_el.achievement_id,                                                        session)        if user_by_id:            if achievement_by_id:                if not await get_user_achievement_by_data(user_achievement,                                                          user_achievement_el,                                                          session):                    await create_user_achievement(user_achievement,                                                  user_achievement_el, session)                    return {                        "status": "success",                        "data": None,                        "details": "User has successfully earned the achievement"                    }                return {                    "status": "error",                    "data": None,                    "details": "User is already had this achievement"                }            return {                "status": "error",                "data": None,                "details": "Achievement with this achievement_id is not exist"            }        return {            "status": "error",            "data": None,            "details": "User is not exist"        }    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }@router.delete("/")async def delete_user_achievement(user_achievement_el: UserAchievementElement,                                  session: AsyncSession = Depends(                                      get_async_session)):    try:        user_by_id = await get_user_by_id(user_achievement_el.user_id, user,                                          session)        achievement_by_id = await get_achievement_by_id(achievement,                                                        user_achievement_el.achievement_id,                                                        session)        if user_by_id:            if achievement_by_id:                if await get_user_achievement_by_data(user_achievement,                                                      user_achievement_el,                                                      session):                    await delete_user_achievement_from_db(user_achievement,                                                          user_achievement_el,                                                          session)                    return {                        "status": "success",                        "data": None,                        "details": "User has successfully lost the achievement"                    }                return {                    "status": "error",                    "data": None,                    "details": "User is not have this achievement"                }            return {                "status": "error",                "data": None,                "details": "Achievement with this achievement_id is not exist"            }        return {            "status": "error",            "data": None,            "details": "User is not exist"        }    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }# ORM - Object relational model# SQL Injection