from typing import Listfrom fastapi import APIRouter, Dependsfrom sqlalchemy.ext.asyncio import AsyncSessionfrom ..models.models import site_visitor, site, userfrom ..database import get_async_sessionfrom .schemas import SiteVisitorRead, SiteVisitorElementfrom .services import get_site_visitors_from_db, get_site_visitor_by_data, \    create_site_visitor, delete_site_visitor_from_dbfrom ..site.services import get_site_by_idfrom ..user.services import get_user_by_idrouter = APIRouter(    prefix="/site_visitor",    tags=["Site visitor"])@router.get("/", response_model=List[SiteVisitorRead])async def get_site_visitors(        session: AsyncSession = Depends(get_async_session)):    try:        return await get_site_visitors_from_db(site_visitor, session)    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }@router.post("/")async def set_site_visitor(site_visitor_el: SiteVisitorElement,                           session: AsyncSession = Depends(get_async_session)):    try:        site_ex = await get_site_by_id(site_visitor_el.site_id, site, session)        user_by_id = await get_user_by_id(site_visitor_el.user_id, user,                                          session)        if site_ex:            if user_by_id:                if not await get_site_visitor_by_data(site_visitor_el,                                                      site_visitor, session):                    await create_site_visitor(site_visitor_el, site_visitor,                                              session)                    return {                        "status": "success",                        "data": None,                        "details": "User has successfully registered on this site"                    }                return {                    "status": "error",                    "data": None,                    "details": "User is already registered on this site"                }            return {                "status": "error",                "data": None,                "details": "User is not exist"            }        return {            "status": "error",            "data": None,            "details": "Site is not available at this moment"        }    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }@router.delete("/")async def delete_site_visitor(site_visitor_el: SiteVisitorElement,                              session: AsyncSession = Depends(                                  get_async_session)):    try:        site_ex = await get_site_by_id(site_visitor_el.site_id, site, session)        user_by_id = await get_user_by_id(site_visitor_el.user_id, user,                                          session)        if site_ex:            if user_by_id:                if await get_site_visitor_by_data(site_visitor_el,                                                  site_visitor, session):                    await delete_site_visitor_from_db(site_visitor_el,                                                      site_visitor,                                                      session)                    return {                        "status": "success",                        "data": None,                        "details": "User has successfully deleted from this site"                    }                return {                    "status": "error",                    "data": None,                    "details": "User is not registered on this site"                }            return {                "status": "error",                "data": None,                "details": "User is not exist"            }        return {            "status": "error",            "data": None,            "details": "Site is not available at this moment"        }    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }# ORM - Object relational model# SQL Injection