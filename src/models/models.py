from datetime import datetimefrom fastapi_users_db_sqlalchemy import SQLAlchemyBaseUserTablefrom sqlalchemy import MetaData, Integer, Stringfrom sqlalchemy import TIMESTAMP, ForeignKey, Table, Column, JSON, Booleanfrom ..database import Basemetadata = MetaData()role = Table(    "role",    metadata,    Column("id", Integer, primary_key=True, autoincrement=True),    Column("name", String, nullable=False),    Column("permission", JSON, nullable=False, default="common_user"),    extend_existing=True)site = Table(    "site",    metadata,    Column("id", Integer, primary_key=True, autoincrement=True),    Column("name", String, nullable=False),    Column("address", String, nullable=False))achievement = Table(    "achievement",    metadata,    Column("id", Integer, primary_key=True, autoincrement=True),    Column("name", String, nullable=False),    Column("description", String, nullable=True),    Column("picture_name", String, nullable=True),    extend_existing=True)user = Table(    "user",    metadata,    Column("id", Integer, primary_key=True, autoincrement=True),    Column("email", String, nullable=False),    Column("username", String, nullable=False),    Column("hashed_password", String, nullable=False),    Column("registered_at", TIMESTAMP, default=datetime.utcnow),    Column("role_id", Integer, ForeignKey(role.c.id)),    Column("is_active", Boolean, default=True, nullable=False),    Column("is_superuser", Boolean, default=False, nullable=False),    Column("is_verified", Boolean, default=False, nullable=False),    extend_existing=True)friend = Table(    "friend",    metadata,    Column("id", Integer, primary_key=True, autoincrement=True),    Column("user_id", Integer, ForeignKey(user.c.id)),    Column("friend_id", Integer, ForeignKey(user.c.id)),    Column("friend_request", Boolean, default=False),    Column("sender", Boolean, default=True),    Column("respondent", Boolean, default=False),    extend_existing=True)event = Table(    "event",    metadata,    Column("id", Integer, primary_key=True, autoincrement=True),    Column("name", String, nullable=False),    Column("site_id", Integer, ForeignKey(site.c.id)),    Column("achievement_id", Integer, ForeignKey(achievement.c.id)),    Column("date_of_event", TIMESTAMP, default=datetime.utcnow),    extend_existing=True)event_organizer = Table(    "event_organizer",    metadata,    Column("id", Integer, primary_key=True, autoincrement=True),    Column("event_id", Integer, ForeignKey(event.c.id)),    Column("organizer_id", Integer, ForeignKey(user.c.id)),    extend_existing=True)event_artist = Table(    "event_artist",    metadata,    Column("id", Integer, primary_key=True, autoincrement=True),    Column("event_id", Integer, ForeignKey(event.c.id)),    Column("artist_id", Integer, ForeignKey(user.c.id)),    extend_existing=True)event_visitor = Table(    "event_visitor",    metadata,    Column("id", Integer, primary_key=True, autoincrement=True),    Column("event_id", Integer, ForeignKey(event.c.id)),    Column("user_id", Integer, ForeignKey(user.c.id)),    Column("user_status", String, nullable=False, default="хочу пойти"),    extend_existing=True)ticket = Table(    "ticket",    metadata,    Column("id", Integer, primary_key=True, autoincrement=True),    Column("type", String, nullable=False),    Column("event_id", Integer, ForeignKey(event.c.id)),    extend_existing=True)site_visitor = Table(    "site_visitor",    metadata,    Column("id", Integer, primary_key=True, autoincrement=True),    Column("user_id", Integer, ForeignKey(user.c.id)),    Column("site_id", Integer, ForeignKey(site.c.id)),    extend_existing=True)user_achievement = Table(    "user_achievement",    metadata,    Column("id", Integer, primary_key=True, autoincrement=True),    Column("user_id", Integer, ForeignKey(user.c.id)),    Column("achievement_id", Integer, ForeignKey(achievement.c.id)),    extend_existing=True)flashback = Table(    "flashback",    metadata,    Column("id", Integer, primary_key=True, autoincrement=True),    Column("user_id", Integer, ForeignKey(user.c.id)),    Column("event_id", Integer, ForeignKey(event.c.id)),    Column("signature", String, nullable=False),    extend_existing=True)user_ticket = Table(    "user_ticket",    metadata,    Column("id", Integer, primary_key=True, autoincrement=True),    Column("user_id", Integer, ForeignKey(user.c.id)),    Column("ticket_id", Integer, ForeignKey(ticket.c.id)),    extend_existing=True)class User(SQLAlchemyBaseUserTable[int], Base):    id = Column(Integer, primary_key=True)    email = Column(String, nullable=False)    username = Column(String, nullable=False)    registered_at = Column(TIMESTAMP, default=datetime.utcnow)    role_id = Column(Integer, ForeignKey(role.c.id))    hashed_password: str = Column(String(length=1024), nullable=False)    is_active: bool = Column(Boolean, default=True, nullable=False)    is_superuser: bool = Column(Boolean, default=False, nullable=False)    is_verified: bool = Column(Boolean, default=False, nullable=False)    __table_args__ = {'extend_existing': True}