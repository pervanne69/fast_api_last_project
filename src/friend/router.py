from typing import Listfrom fastapi import APIRouter, Dependsfrom sqlalchemy.ext.asyncio import AsyncSessionfrom ..models.models import friend, userfrom ..database import get_async_sessionfrom .schemas import FriendReadfrom .services import get_friends_from_db, check_if_users_exist, \    check_if_request_already_sent, create_friend_request, user_confirm_request, \    check_user_respondent, delete_friends_from_dbrouter = APIRouter(    prefix="/friend",    tags=["Friend"])@router.get("/", response_model=List[FriendRead])async def get_friends(session: AsyncSession = Depends(get_async_session)):    try:        return await get_friends_from_db(friend, session)    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }@router.post("/")async def set_friend(user_id: int, friend_id: int,                     session: AsyncSession = Depends(get_async_session)):    try:        if await check_if_users_exist(user_id, friend_id, user, session):            if await check_if_request_already_sent(user_id, friend_id, friend,                                                   session):                return {                    "status": "warning",                    "data": "The request has been already sent",                    "details": None                }            await create_friend_request(user_id, friend_id, friend, session)            return {                "status": "success",                "data": "The request has been sent"            }        else:            return {                "status": "error",                "data": None,                "details": "Users is not exist in the table"            }    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }@router.put("/")async def confirm_friend_request(status: bool, user_id: int, friend_id: int,                                 session: AsyncSession = Depends(                                     get_async_session)):    if await check_user_respondent(user_id, friend_id, friend, session):        if status:            await user_confirm_request(user_id, friend_id, friend, session)            return {                "status": "success",                "data": None,                "details": "User has confirmed the request"            }        else:            await delete_friend(                user_id, friend_id, session            )            return {                "status": "success",                "data": None,                "details": "You have been rejected the friend request"            }    else:        return {            "status": "error",            "data": None,            "details": "User must be a respondent instead of sender"        }@router.delete("/")async def delete_friend(user_id: int, friend_id: int,                        session: AsyncSession = Depends(get_async_session)):    try:        if await check_if_users_exist(user_id, friend_id, user, session):            if await check_if_request_already_sent(user_id, friend_id, friend,                                                   session):                await delete_friends_from_db(user_id, friend_id, friend,                                             session)                return {                    "status": "success",                    "data": "friend has beeb deleted"                }        else:            return {                "status": "warning",                "data": None,                "details": "The friend is not exist"            }    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }# ORM - Object relational model# SQL Injection