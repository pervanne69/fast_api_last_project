from sqlalchemy import select, insert, delete, updatefrom fastapi import Dependsfrom sqlalchemy.ext.asyncio import AsyncSessionfrom ..database import get_async_sessionfrom ..user.services import get_user_by_idasync def get_friends_from_db(db, session: AsyncSession = Depends(    get_async_session)):    query = select(db)    result = await session.execute(query)    return result.all()async def check_if_users_exist(user_id: int, friend_id: int, db,                               session: AsyncSession = Depends(                                   get_async_session)):    return await get_user_by_id(user_id, db, session) and await get_user_by_id(        friend_id, db, session)async def check_if_request_already_sent(user_id: int, friend_id: int, db,                                        session: AsyncSession = Depends(                                            get_async_session)):    query = select(db).where(db.c.user_id == user_id,                             db.c.friend_id == friend_id)    result = await session.execute(query)    for friend_c in result.fetchall():        if friend_c[1] == user_id and friend_c[2] == friend_id:            return True    return Falseasync def create_friend_request(user_id: int, friend_id: int, db,                                session: AsyncSession = Depends(                                    get_async_session)):    statement1 = insert(db).values(user_id=user_id,                                   friend_id=friend_id)    statement2 = insert(db).values(user_id=friend_id,                                   friend_id=user_id, sender=False,                                   respondent=True)    print(statement1)    await session.execute(statement1)    await session.execute(statement2)    await session.commit()async def check_user_respondent(user_id: int, friend_id: int, db,                                session: AsyncSession = Depends(                                    get_async_session)):    query = select(db).where(db.c.user_id == user_id,                             db.c.friend_id == friend_id)    result = await session.execute(query)    for friend_c in result.fetchall():        if friend_c[1] == user_id and friend_c[2] == friend_id:            if friend_c[5]:                return Trueasync def user_confirm_request(user_id: int, friend_id: int, db,                               session: AsyncSession = Depends(                                   get_async_session)):    statement1 = update(db).values(        friend_request=True).where(db.c.user_id == user_id,                                   db.c.friend_id == friend_id)    statement2 = update(db).values(        friend_request=True).where(        db.c.user_id == friend_id,        db.c.friend_id == user_id)    await session.execute(statement1)    await session.execute(statement2)    await session.commit()async def delete_friends_from_db(user_id: int, friend_id: int, db,                                 session: AsyncSession = Depends(                                     get_async_session)):    statement1 = delete(db).where(        db.c.user_id == user_id,        db.c.friend_id == friend_id)    statement2 = delete(db).where(        db.c.user_id == friend_id,        db.c.friend_id == user_id)    await session.execute(statement1)    await session.execute(statement2)    await session.commit()