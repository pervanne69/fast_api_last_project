from typing import Listfrom fastapi import APIRouter, Dependsfrom sqlalchemy.ext.asyncio import AsyncSessionfrom ..models.models import event_organizer, user, eventfrom ..database import get_async_sessionfrom ..user.services import get_user_by_idfrom ..event.services import get_event_from_db_by_idfrom .schemas import EventOrganizerRead, EventOrganizerElementfrom .services import get_event_organizers_from_db, \    get_event_organizer_from_db, \    create_event_organizer, delete_event_organizer_from_dbrouter = APIRouter(    prefix="/event_organizer",    tags=["Event organizer"])@router.get("/", response_model=List[EventOrganizerRead])async def get_event_organizers(        session: AsyncSession = Depends(get_async_session)):    try:        return await get_event_organizers_from_db(event_organizer, session)    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }@router.post("/")async def set_event_organizer(event_organizer_el: EventOrganizerElement,                              session: AsyncSession = Depends(                                  get_async_session)):    try:        user_by_id = await get_user_by_id(event_organizer_el.organizer_id, user,                                          session)        event_by_id = await get_event_from_db_by_id(event,                                                    event_organizer_el.event_id,                                                    session)        if user_by_id:            if event_by_id:                if user_by_id[0][5] == 3:                    if not await get_event_organizer_from_db(event_organizer,                                                             event_organizer_el,                                                             session):                        await create_event_organizer(event_organizer,                                                     event_organizer_el,                                                     session)                        return {                            "status": "success",                            "data": None,                            "details": "Organizer has successfully registered on this event"                        }                    return {                        "status": "error",                        "data": None,                        "details": f"Organizer with organizer_id {event_organizer_el.organizer_id} is already registered on this event"                    }                return {                    "status": "error",                    "data": None,                    "details": f"Organizer with user_id {event_organizer_el.organizer_id} is not an organizer"                }            return {                "status": "error",                "data": None,                "details": f"Event with event_id {event_organizer_el.event_id} is not exist"            }        return {            "status": "error",            "data": None,            "details": f"Organizer with user_id {event_organizer_el.organizer_id} is not exist"        }    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }@router.delete("/")async def delete_event_organizer(event_organizer_el: EventOrganizerElement,                                 session: AsyncSession = Depends(                                     get_async_session)):    try:        user_by_id = await get_user_by_id(event_organizer_el.organizer_id,                                          user,                                          session)        event_by_id = await get_event_from_db_by_id(event,                                                    event_organizer_el.event_id,                                                    session)        if user_by_id:            if event_by_id:                if await get_event_organizer_from_db(event_organizer,                                                     event_organizer_el,                                                     session):                    await delete_event_organizer_from_db(event_organizer,                                                         event_organizer_el,                                                         session)                    return {                        "status": "success",                        "data": None,                        "details": "Organizer has been successfully deleted"                    }                return {                    "status": "error",                    "data": None,                    "details": f"Organizer with organizer_id {event_organizer_el.organizer_id} is not registered on this event"                }            return {                "status": "error",                "data": None,                "details": f"Event with event_id {event_organizer_el.event_id} is not exist"            }        return {            "status": "error",            "data": None,            "details": f"Organizer with user_id {event_organizer_el.organizer_id} is not exist"        }    except Exception as ex:        return {            "status": "error",            "data": None,            "details": ex        }