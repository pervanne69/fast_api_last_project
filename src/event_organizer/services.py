from fastapi import Dependsfrom sqlalchemy.ext.asyncio import AsyncSessionfrom ..database import get_async_sessionfrom sqlalchemy import select, insert, deletefrom .schemas import EventOrganizerElementasync def get_event_organizers_from_db(db, session: AsyncSession = Depends(    get_async_session)):    query = select(db)    result = await session.execute(query)    return result.all()async def get_event_organizer_from_db(db,                                      event_organizer_el: EventOrganizerElement,                                      session: AsyncSession = Depends(                                          get_async_session)):    query = select(db).where(        db.c.organizer_id == event_organizer_el.organizer_id,        db.c.event_id == event_organizer_el.event_id)    result = await session.execute(query)    return result.all()async def create_event_organizer(db, event_organizer_el: EventOrganizerElement,                                 session: AsyncSession = Depends(                                     get_async_session)):    statement = insert(db).values(event_id=event_organizer_el.event_id,                                  organizer_id=event_organizer_el.organizer_id)    await session.execute(statement)    await session.commit()async def delete_event_organizer_from_db(db,                                         event_organizer_el: EventOrganizerElement,                                         session: AsyncSession = Depends(                                             get_async_session)):    statement = delete(db).where(        db.c.organizer_id == event_organizer_el.organizer_id,        db.c.event_id == event_organizer_el.event_id)    await session.execute(statement)    await session.commit()